pipeline {
  // Define the agent (Docker container) to run the pipeline in
  agent {
    docker {
      image 'abhishekf5/maven-abhishek-docker-agent:v1' // Replace with the appropriate Docker image for your build tools
      // Optionally mount the host's Docker socket for access (if needed)
      args '--user root -v /var/run/docker.sock:/var/run/docker.sock'
    }
  }

  // Define the pipeline stages
  stages {
    // Checkout the project code (uncomment and update details)
    stage('Checkout') {
      steps {
        sh 'echo passed' // Placeholder, replace with checkout command (e.g., git checkout)
        // Uncomment and update these lines with your Git repository details
        // git branch: 'main', url: 'https://github.com/your-username/your-repository.git'
      }
    }

    // Build and test your project (replace with your build and test commands)
    stage('Build and Test') {
      steps {
        sh 'ls -ltr'  // Placeholder, replace with actual build and test commands (e.g., mvn commands)
      }
    }

    // Perform static code analysis using SonarQube
    stage('Static Code Analysis') {
      environment {
        SONAR_URL = "http://20.44.61.179:9000/"  // Replace with your SonarQube server URL
      }
      steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          sh '''
            cd java-maven-sonar-argocd-helm-k8s/spring-boot-app  # Assuming project directory
            mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}
          '''
        }
      }
    }

    // Build and push the Docker image
    stage('Build and Push Docker Image') {
      environment {
        DOCKER_IMAGE = "kspoornesh/ultimate-cicd:${BUILD_NUMBER}"  // Update username
        // DOCKERFILE_LOCATION = "java-maven-sonar-argocd-helm-k8s/spring-boot-app/Dockerfile" (optional)
        REGISTRY_CREDENTIALS = credentials('docker-cred')
      }
      steps {
        script {
          sh '''
            cd java-maven-sonar-argocd-helm-k8s/spring-boot-app  # Assuming project directory
            docker build -t ${DOCKER_IMAGE} .
          '''
          def dockerImage = docker.image("${DOCKER_IMAGE}")
          docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
            dockerImage.push()
          }
        }
      }
    }

    // Update the deployment file with the new image version
    stage('Update Deployment File') {
      environment {
        GIT_REPO_NAME = "Jenkins-Zero-To-Hero"  // Replace with your target repository name
        GIT_USER_NAME = "poorneshks"        // Update with your username with push permissions
      }
      steps {
        withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
          sh '''
            git config user.email abhishek.xyz@gmail.com  # Replace with your email
            git config user.name "Abhishek Veeramalla"    # Replace with your name
            BUILD_NUMBER=${BUILD_NUMBER}
            sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
            git add java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
            git commit -m "Update deployment image to version ${BUILD_NUMBER}"
            git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
          '''
        }
      }
    }
  }
}
